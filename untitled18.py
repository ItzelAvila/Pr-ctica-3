# -*- coding: utf-8 -*-
"""untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/ItzelAvila/77a32d8b72f348b32928e5d11bd9bfcc/untitled18.ipynb
"""

from google.colab import drive
drive.mount('/content/drive') #Montar nuestro Drive en Phyton

import pandas as pd
import sys

print("")

class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, node, key, index):
        if index == len(key):
            node.is_end_of_word = True
            return

        char = key[index]
        if char not in node.children:
            node.children[char] = TrieNode()

        self.insert(node.children[char], key, index + 1)

    def build_trie_from_excel(self, letras, cadenas):
        for letra, cadena in zip(letras, cadenas):
            binary_string = str(cadena)
            binary_string = binary_string.zfill(8)
            self.insert(self.root, binary_string, 0)

class Descifrador:
    def __init__(self, Letras, Cadena):
        self.Identificacion = dict(zip(Letras, Cadena))
        self.trie = Trie()
        self.trie.build_trie_from_excel(Letras, Cadena)

    def Texto_a_binario(self, Texto):
        binario = ""   #Comienza el codigo binario transformado
        for caracter in Texto:
            try:  #Para encontrar el caracter en el diccionario
                valor = self.Identificacion.get(caracter)  #Para obtener el valor binario del caracter

                if valor is None:
                   raise ValueError(f"Caracter Desconocido: '{caracter}'") #Si no hay valor binario asignado se muestra el caracter que se desconocio
            except ValueError: #Si falla sacar un Error de Valor

                raise ValueError(f"Caracter Desconocido: '{caracter}'") #Mostrar el caracter que se desconocio
            binario += str(valor) #Se añade el valor binario al codigo
        return binario

    def binario_a_Texto(self, binario): #Recibe el codigo y lo devuelve convertido en texto
      Texto = "" #Comienza la cadena de texto transformada
      current_node = self.trie.root
      word = ""  #Para almacenar la palabra codificada
      i = 0

      while i < len(binario): #Para recorrer el codigo binario
          char = binario[i]
          if char in current_node.children:
              current_node = current_node.children[char]
              if current_node.is_end_of_word:
                  Texto += list(self.Identificacion.keys())[list(self.Identificacion.values()).index(word)]
                  word = ""
                  current_node = self.trie.root
              else:
                  word += char
          else:
              raise ValueError(f"Cadena binaria desconocida: '{binario[i:i+8]}'")
          i += 1

      return Texto

Claves = pd.read_excel(r'/content/gdrive/MyDrive/Practica.xlsx') #Aceede al archivo Excel
Letras = list(Alfabeto["Letras"]) #Convierte la columna 'Letras' en una lista
Cadenas = []
for cadena in Alfabeto["Codigo Binario"]: #Convertir la columna 'Codigo Binario' en una lista
    Cadenas.append(str(cadena).zfill(8)) #Encuentra el elemento 'esp' y lo reempláza con espacio
Espacio_C = Letras.index('esp')
Letras[Espacio_C] = ' '

Descifrar = Descifrador(Letras, Cadenas) #Crea un diccionario donde cada letra se define con su forma binaria

print("Elige una de las siguientes opciones:")
print("1: Texto a Binario")
print("2: Binario a Texto")
print("3: Mostrar Alfabeto")
print("")
while True:
  try:
    E = int(input("")) #Recibe un input y lo intenta cambiar a int
    if E in [1,2,3]:
      break
    else:
      print("Por favor, ingresa una opcion valida.\n")
  except ValueError:
    print("Por favor, ingresa una opcion valida.\n")

print("")

if E == 1: #Texto a Binario
  Texto = input("Escribe el texto a transformar: ")
  Binario = Descifrar.Texto_a_Binario(Texto)
  print("Texto transformado:", Binario)

elif E == 2: #Binario a Texto
  Binario = input("Escribe el binario a transformar: ")
  Texto = Descifrar.Binario_a_Texto(Binario)
  print("Binario transformado:", Texto)

elif E == 3: #Mostrar Alfabeto
  print("Letra\tBinario")
  #Imprime las columnas de Letras y Cadenas ordenadamente
  for i,j in zip(Letras, Cadenas):
    print(f"{i}\t{j}")